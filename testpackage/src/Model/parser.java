
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Model;

import java.util.*;
import java.lang.*;
import java_cup.runtime.*;
import Model.operations.*;
import Model.typeSystem.*;
import Model.multipass.*;
import Model.scope.*;
import Model.cgen.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\223\000\002\032\004\000\002\002\004\000\002\036" +
    "\004\000\002\036\002\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\052\002\000" +
    "\002\053\002\000\002\054\002\000\002\024\013\000\002" +
    "\055\002\000\002\056\002\000\002\057\002\000\002\024" +
    "\013\000\002\046\004\000\002\046\002\000\002\050\005" +
    "\000\002\050\002\000\002\060\002\000\002\026\012\000" +
    "\002\037\004\000\002\037\002\000\002\061\002\000\002" +
    "\040\006\000\002\040\002\000\002\041\005\000\002\041" +
    "\002\000\002\051\004\000\002\051\002\000\002\025\004" +
    "\000\002\025\004\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\002\000\002\062\002\000\002" +
    "\027\010\000\002\042\004\000\002\042\002\000\002\063" +
    "\002\000\002\064\002\000\002\034\012\000\002\065\002" +
    "\000\002\066\002\000\002\034\012\000\002\067\002\000" +
    "\002\035\006\000\002\031\004\000\002\031\003\000\002" +
    "\043\004\000\002\043\002\000\002\003\004\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\023\004\000\002\022\004\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\004\000\002\070\002" +
    "\000\002\071\002\000\002\072\002\000\002\073\002\000" +
    "\002\074\002\000\002\002\020\000\002\075\002\000\002" +
    "\076\002\000\002\077\002\000\002\004\012\000\002\100" +
    "\002\000\002\101\002\000\002\102\002\000\002\103\002" +
    "\000\002\005\014\000\002\006\004\000\002\006\002\000" +
    "\002\020\003\000\002\020\002\000\002\010\005\000\002" +
    "\007\004\000\002\012\004\000\002\104\002\000\002\105" +
    "\002\000\002\013\010\000\002\013\010\000\002\106\002" +
    "\000\002\107\002\000\002\011\012\000\002\110\002\000" +
    "\002\045\005\000\002\045\002\000\002\111\002\000\002" +
    "\047\006\000\002\047\002\000\002\017\005\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\004\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\004\000\002\017\005\000" +
    "\002\017\005\000\002\017\004\000\002\017\010\000\002" +
    "\017\006\000\002\017\006\000\002\017\006\000\002\017" +
    "\006\000\002\017\003\000\002\016\003\000\002\016\005" +
    "\000\002\016\006\000\002\015\003\000\002\015\005\000" +
    "\002\015\006\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\044" +
    "\003\000\002\044\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0105\000\022\037\006\040\017\041\013\042\016\043" +
    "\014\044\023\050\021\073\020\001\002\000\006\031\102" +
    "\073\u0100\001\002\000\024\002\ufffe\037\006\040\017\041" +
    "\013\042\016\043\014\044\023\050\021\073\020\001\002" +
    "\000\010\024\uffc1\031\uffc1\073\uffc1\001\002\000\024\002" +
    "\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa" +
    "\050\ufffa\073\ufffa\001\002\000\024\002\ufffd\037\ufffd\040" +
    "\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd\050\ufffd\073\ufffd" +
    "\001\002\000\004\032\374\001\002\000\004\002\373\001" +
    "\002\000\010\024\uffbf\031\uffbf\073\uffbf\001\002\000\004" +
    "\073\113\001\002\000\024\002\ufffb\037\ufffb\040\ufffb\041" +
    "\ufffb\042\ufffb\043\ufffb\044\ufffb\050\ufffb\073\ufffb\001\002" +
    "\000\010\024\uffbe\031\uffbe\073\uffbe\001\002\000\010\024" +
    "\uffc0\031\uffc0\073\uffc0\001\002\000\010\024\uffbd\031\uffbd" +
    "\073\uffbd\001\002\000\004\073\054\001\002\000\024\002" +
    "\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc" +
    "\050\ufffc\073\ufffc\001\002\000\004\073\024\001\002\000" +
    "\010\027\uffea\045\uffea\046\025\001\002\000\004\073\053" +
    "\001\002\000\006\027\uffe7\045\030\001\002\000\004\027" +
    "\uffed\001\002\000\004\073\031\001\002\000\006\027\uffe9" +
    "\033\uffe9\001\002\000\006\027\uffe5\033\033\001\002\000" +
    "\004\073\035\001\002\000\004\027\uffe8\001\002\000\006" +
    "\027\uffe5\033\033\001\002\000\004\027\uffe6\001\002\000" +
    "\004\027\040\001\002\000\026\030\uffe3\037\uffdd\040\uffdd" +
    "\041\uffdd\042\uffdd\043\uffdd\073\uffdd\076\045\077\046\100" +
    "\041\001\002\000\016\037\uffdf\040\uffdf\041\uffdf\042\uffdf" +
    "\043\uffdf\073\uffdf\001\002\000\026\030\uffe3\037\uffdd\040" +
    "\uffdd\041\uffdd\042\uffdd\043\uffdd\073\uffdd\076\045\077\046" +
    "\100\041\001\002\000\004\030\051\001\002\000\016\037" +
    "\006\040\017\041\013\042\016\043\014\073\020\001\002" +
    "\000\016\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde\073" +
    "\uffde\001\002\000\016\037\uffe0\040\uffe0\041\uffe0\042\uffe0" +
    "\043\uffe0\073\uffe0\001\002\000\026\030\uffe2\037\uffe2\040" +
    "\uffe2\041\uffe2\042\uffe2\043\uffe2\073\uffe2\076\uffe2\077\uffe2" +
    "\100\uffe2\001\002\000\026\030\uffe1\037\uffe1\040\uffe1\041" +
    "\uffe1\042\uffe1\043\uffe1\073\uffe1\076\uffe1\077\uffe1\100\uffe1" +
    "\001\002\000\024\002\uffec\037\uffec\040\uffec\041\uffec\042" +
    "\uffec\043\uffec\044\uffec\050\uffec\073\uffec\001\002\000\004" +
    "\030\uffe4\001\002\000\006\027\uffeb\045\uffeb\001\002\000" +
    "\004\027\uffdc\001\002\000\004\027\056\001\002\000\020" +
    "\030\uffd9\037\006\040\017\041\013\042\016\043\061\073" +
    "\020\001\002\000\006\031\102\073\104\001\002\000\004" +
    "\030\103\001\002\000\004\073\064\001\002\000\020\030" +
    "\uffd9\037\006\040\017\041\013\042\016\043\061\073\020" +
    "\001\002\000\004\030\uffda\001\002\000\004\023\065\001" +
    "\002\000\016\024\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5" +
    "\073\uffd5\001\002\000\016\024\ufff0\037\006\040\017\041" +
    "\013\042\016\073\020\001\002\000\006\031\102\073\101" +
    "\001\002\000\004\024\uffd4\001\002\000\006\024\uffee\033" +
    "\072\001\002\000\014\037\006\040\017\041\013\042\016" +
    "\073\020\001\002\000\004\024\ufff1\001\002\000\006\024" +
    "\uffee\033\072\001\002\000\004\024\uffef\001\002\000\004" +
    "\024\077\001\002\000\004\032\100\001\002\000\020\030" +
    "\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\073\uffd3" +
    "\001\002\000\010\024\uffc2\032\uffc2\033\uffc2\001\002\000" +
    "\010\024\uffbc\031\uffbc\073\uffbc\001\002\000\024\002\uffdb" +
    "\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\050" +
    "\uffdb\073\uffdb\001\002\000\004\023\105\001\002\000\016" +
    "\024\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\073\uffd8\001" +
    "\002\000\016\024\ufff0\037\006\040\017\041\013\042\016" +
    "\073\020\001\002\000\004\024\uffd7\001\002\000\004\024" +
    "\111\001\002\000\004\032\112\001\002\000\020\030\uffd6" +
    "\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\073\uffd6\001" +
    "\002\000\004\023\114\001\002\000\016\024\ufff5\037\ufff5" +
    "\040\ufff5\041\ufff5\042\ufff5\073\ufff5\001\002\000\016\024" +
    "\ufff0\037\006\040\017\041\013\042\016\073\020\001\002" +
    "\000\004\024\ufff4\001\002\000\004\024\120\001\002\000" +
    "\004\027\ufff3\001\002\000\004\027\uffd2\001\002\000\004" +
    "\027\124\001\002\000\034\002\ufff2\030\ufff2\037\ufff2\040" +
    "\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2\050\ufff2\073\ufff2" +
    "\076\ufff2\077\ufff2\100\ufff2\001\002\000\104\006\140\020" +
    "\141\023\136\027\uffd2\030\uffcd\032\uffa9\035\156\036\145" +
    "\037\006\040\017\041\013\042\016\047\151\051\161\052" +
    "\uffb5\053\uffb1\055\uffbb\056\153\057\162\060\137\061\201" +
    "\062\143\063\127\064\164\065\166\066\172\067\167\070" +
    "\142\071\147\072\131\073\152\074\155\075\176\001\002" +
    "\000\076\006\uffc6\020\uffc6\023\uffc6\027\uffc6\030\uffc6\032" +
    "\uffc6\035\uffc6\036\uffc6\047\uffc6\051\uffc6\052\uffc6\053\uffc6" +
    "\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6\062" +
    "\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6\070\uffc6" +
    "\071\uffc6\072\uffc6\073\uffc6\074\uffc6\075\uffc6\001\002\000" +
    "\004\030\uffcf\001\002\000\004\023\371\001\002\000\050" +
    "\005\uff97\006\uff97\007\uff97\010\uff97\011\uff97\012\uff97\013" +
    "\uff97\014\uff97\015\uff97\016\uff97\017\uff97\021\uff97\022\uff97" +
    "\024\uff97\025\uff97\026\uff97\032\uff97\033\uff97\034\uff97\001" +
    "\002\000\050\005\uff72\006\uff72\007\uff72\010\uff72\011\uff72" +
    "\012\uff72\013\uff72\014\uff72\015\uff72\016\uff72\017\uff72\021" +
    "\uff72\022\uff72\024\uff72\025\uff72\026\uff72\032\uff72\033\uff72" +
    "\034\uff72\001\002\000\076\006\uffcb\020\uffcb\023\uffcb\027" +
    "\uffcb\030\uffcb\032\uffcb\035\uffcb\036\uffcb\047\uffcb\051\uffcb" +
    "\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060" +
    "\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb" +
    "\067\uffcb\070\uffcb\071\uffcb\072\uffcb\073\uffcb\074\uffcb\075" +
    "\uffcb\001\002\000\004\053\356\001\002\000\004\030\355" +
    "\001\002\000\076\006\uffc5\020\uffc5\023\uffc5\027\uffc5\030" +
    "\uffc5\032\uffc5\035\uffc5\036\uffc5\047\uffc5\051\uffc5\052\uffc5" +
    "\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\061" +
    "\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5\067\uffc5" +
    "\070\uffc5\071\uffc5\072\uffc5\073\uffc5\074\uffc5\075\uffc5\001" +
    "\002\000\050\006\140\020\141\023\136\035\156\036\145" +
    "\047\151\051\161\062\143\063\127\064\164\065\166\066" +
    "\172\067\167\070\142\071\147\072\131\073\204\074\155" +
    "\075\176\001\002\000\004\032\352\001\002\000\050\006" +
    "\140\020\141\023\136\035\156\036\145\047\151\051\161" +
    "\062\143\063\127\064\164\065\166\066\172\067\167\070" +
    "\142\071\147\072\131\073\204\074\155\075\176\001\002" +
    "\000\050\006\140\020\141\023\136\035\156\036\145\047" +
    "\151\051\161\062\143\063\127\064\164\065\166\066\172" +
    "\067\167\070\142\071\147\072\131\073\204\074\155\075" +
    "\176\001\002\000\050\005\uff75\006\uff75\007\uff75\010\uff75" +
    "\011\uff75\012\uff75\013\uff75\014\uff75\015\uff75\016\uff75\017" +
    "\uff75\021\uff75\022\uff75\024\uff75\025\uff75\026\uff75\032\uff75" +
    "\033\uff75\034\uff75\001\002\000\004\023\346\001\002\000" +
    "\004\052\337\001\002\000\004\023\332\001\002\000\004" +
    "\055\315\001\002\000\050\005\uff74\006\uff74\007\uff74\010" +
    "\uff74\011\uff74\012\uff74\013\uff74\014\uff74\015\uff74\016\uff74" +
    "\017\uff74\021\uff74\022\uff74\024\uff74\025\uff74\026\uff74\032" +
    "\uff74\033\uff74\034\uff74\001\002\000\076\006\uffca\020\uffca" +
    "\023\uffca\027\uffca\030\uffca\032\uffca\035\uffca\036\uffca\047" +
    "\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055\uffca\056\uffca" +
    "\057\uffca\060\uffca\061\uffca\062\uffca\063\uffca\064\uffca\065" +
    "\uffca\066\uffca\067\uffca\070\uffca\071\uffca\072\uffca\073\uffca" +
    "\074\uffca\075\uffca\001\002\000\050\005\uff96\006\uff96\007" +
    "\uff96\010\uff96\011\uff96\012\uff96\013\uff96\014\uff96\015\uff96" +
    "\016\uff96\017\uff96\021\uff96\022\uff96\024\uff96\025\uff96\026" +
    "\uff96\032\uff96\033\uff96\034\uff96\001\002\000\052\004\uff78" +
    "\005\uff7b\006\uff7b\007\uff7b\010\uff7b\011\uff7b\012\uff7b\013" +
    "\uff7b\014\uff7b\015\uff7b\016\uff7b\017\uff7b\021\uff7b\022\uff7b" +
    "\023\205\025\uff7b\031\uffbd\032\uff7b\034\uff7b\073\uffbd\001" +
    "\002\000\052\006\140\020\141\023\136\032\uffa9\035\156" +
    "\036\145\047\151\051\161\062\143\063\127\064\164\065" +
    "\166\066\172\067\167\070\142\071\147\072\131\073\204" +
    "\074\155\075\176\001\002\000\004\032\312\001\002\000" +
    "\050\005\uff70\006\uff70\007\uff70\010\uff70\011\uff70\012\uff70" +
    "\013\uff70\014\uff70\015\uff70\016\uff70\017\uff70\021\uff70\022" +
    "\uff70\024\uff70\025\uff70\026\uff70\032\uff70\033\uff70\034\uff70" +
    "\001\002\000\004\073\311\001\002\000\050\005\uff73\006" +
    "\uff73\007\uff73\010\uff73\011\uff73\012\uff73\013\uff73\014\uff73" +
    "\015\uff73\016\uff73\017\uff73\021\uff73\022\uff73\024\uff73\025" +
    "\uff73\026\uff73\032\uff73\033\uff73\034\uff73\001\002\000\076" +
    "\006\uffc4\020\uffc4\023\uffc4\027\uffc4\030\uffc4\032\uffc4\035" +
    "\uffc4\036\uffc4\047\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4" +
    "\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4\063" +
    "\uffc4\064\uffc4\065\uffc4\066\uffc4\067\uffc4\070\uffc4\071\uffc4" +
    "\072\uffc4\073\uffc4\074\uffc4\075\uffc4\001\002\000\050\005" +
    "\uff71\006\uff71\007\uff71\010\uff71\011\uff71\012\uff71\013\uff71" +
    "\014\uff71\015\uff71\016\uff71\017\uff71\021\uff71\022\uff71\024" +
    "\uff71\025\uff71\026\uff71\032\uff71\033\uff71\034\uff71\001\002" +
    "\000\004\032\310\001\002\000\076\006\uffc9\020\uffc9\023" +
    "\uffc9\027\uffc9\030\uffc9\032\uffc9\035\uffc9\036\uffc9\047\uffc9" +
    "\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057" +
    "\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9" +
    "\066\uffc9\067\uffc9\070\uffc9\071\uffc9\072\uffc9\073\uffc9\074" +
    "\uffc9\075\uffc9\001\002\000\004\023\305\001\002\000\044" +
    "\005\220\006\211\007\224\010\213\011\216\012\222\013" +
    "\214\014\227\015\221\016\217\017\226\021\212\022\230" +
    "\024\uffaa\025\225\032\uffaa\034\223\001\002\000\004\023" +
    "\302\001\002\000\004\023\277\001\002\000\004\004\275" +
    "\001\002\000\104\006\140\020\141\023\136\027\uffd2\030" +
    "\uffcd\032\uffa9\035\156\036\145\037\006\040\017\041\013" +
    "\042\016\047\151\051\161\052\uffb5\053\uffb1\055\uffbb\056" +
    "\153\057\162\060\137\061\201\062\143\063\127\064\164" +
    "\065\166\066\172\067\167\070\142\071\147\072\131\073" +
    "\152\074\155\075\176\001\002\000\004\023\271\001\002" +
    "\000\074\006\140\020\141\023\136\027\uffd2\030\uffcd\032" +
    "\uffa9\035\156\036\145\047\151\051\161\052\uffb5\053\uffb1" +
    "\055\uffbb\056\153\057\162\060\137\061\201\062\143\063" +
    "\127\064\164\065\166\066\172\067\167\070\142\071\147" +
    "\072\131\073\204\074\155\075\176\001\002\000\050\005" +
    "\uff7c\006\uff7c\007\uff7c\010\uff7c\011\uff7c\012\uff7c\013\uff7c" +
    "\014\uff7c\015\uff7c\016\uff7c\017\uff7c\021\uff7c\022\uff7c\024" +
    "\uff7c\025\uff7c\026\uff7c\032\uff7c\033\uff7c\034\uff7c\001\002" +
    "\000\050\005\uff95\006\uff95\007\uff95\010\uff95\011\uff95\012" +
    "\uff95\013\uff95\014\uff95\015\uff95\016\uff95\017\uff95\021\uff95" +
    "\022\uff95\024\uff95\025\uff95\026\uff95\032\uff95\033\uff95\034" +
    "\uff95\001\002\000\050\005\uff6f\006\uff6f\007\uff6f\010\uff6f" +
    "\011\uff6f\012\uff6f\013\uff6f\014\uff6f\015\uff6f\016\uff6f\017" +
    "\uff6f\021\uff6f\022\uff6f\024\uff6f\025\uff6f\026\uff6f\032\uff6f" +
    "\033\uff6f\034\uff6f\001\002\000\076\006\uffc7\020\uffc7\023" +
    "\uffc7\027\uffc7\030\uffc7\032\uffc7\035\uffc7\036\uffc7\047\uffc7" +
    "\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057" +
    "\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065\uffc7" +
    "\066\uffc7\067\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7\074" +
    "\uffc7\075\uffc7\001\002\000\076\006\uffc8\020\uffc8\023\uffc8" +
    "\027\uffc8\030\uffc8\032\uffc8\035\uffc8\036\uffc8\047\uffc8\051" +
    "\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8" +
    "\060\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8\066" +
    "\uffc8\067\uffc8\070\uffc8\071\uffc8\072\uffc8\073\uffc8\074\uffc8" +
    "\075\uffc8\001\002\000\004\023\202\001\002\000\050\006" +
    "\140\020\141\023\136\035\156\036\145\047\151\051\161" +
    "\062\143\063\127\064\164\065\166\066\172\067\167\070" +
    "\142\071\147\072\131\073\204\074\155\075\176\001\002" +
    "\000\044\005\220\006\211\007\224\010\213\011\216\012" +
    "\222\013\214\014\227\015\221\016\217\017\226\021\212" +
    "\022\230\024\uffa1\025\225\033\uffa1\034\223\001\002\000" +
    "\054\004\uff78\005\uff7b\006\uff7b\007\uff7b\010\uff7b\011\uff7b" +
    "\012\uff7b\013\uff7b\014\uff7b\015\uff7b\016\uff7b\017\uff7b\021" +
    "\uff7b\022\uff7b\023\205\024\uff7b\025\uff7b\026\uff7b\032\uff7b" +
    "\033\uff7b\034\uff7b\001\002\000\052\006\uffa5\020\uffa5\023" +
    "\uffa5\024\uffa5\035\uffa5\036\uffa5\047\uffa5\051\uffa5\062\uffa5" +
    "\063\uffa5\064\uffa5\065\uffa5\066\uffa5\067\uffa5\070\uffa5\071" +
    "\uffa5\072\uffa5\073\uffa5\074\uffa5\075\uffa5\001\002\000\052" +
    "\006\140\020\141\023\136\024\uff9c\035\156\036\145\047" +
    "\151\051\161\062\143\063\127\064\164\065\166\066\172" +
    "\067\167\070\142\071\147\072\131\073\204\074\155\075" +
    "\176\001\002\000\004\024\uffa4\001\002\000\044\005\220" +
    "\006\211\007\224\010\213\011\216\012\222\013\214\014" +
    "\227\015\221\016\217\017\226\021\212\022\230\024\uff9e" +
    "\025\225\033\uff9e\034\223\001\002\000\050\006\140\020" +
    "\141\023\136\035\156\036\145\047\151\051\161\062\143" +
    "\063\127\064\164\065\166\066\172\067\167\070\142\071" +
    "\147\072\131\073\204\074\155\075\176\001\002\000\050" +
    "\006\140\020\141\023\136\035\156\036\145\047\151\051" +
    "\161\062\143\063\127\064\164\065\166\066\172\067\167" +
    "\070\142\071\147\072\131\073\204\074\155\075\176\001" +
    "\002\000\050\006\140\020\141\023\136\035\156\036\145" +
    "\047\151\051\161\062\143\063\127\064\164\065\166\066" +
    "\172\067\167\070\142\071\147\072\131\073\204\074\155" +
    "\075\176\001\002\000\050\006\140\020\141\023\136\035" +
    "\156\036\145\047\151\051\161\062\143\063\127\064\164" +
    "\065\166\066\172\067\167\070\142\071\147\072\131\073" +
    "\204\074\155\075\176\001\002\000\006\024\uff99\033\250" +
    "\001\002\000\050\006\140\020\141\023\136\035\156\036" +
    "\145\047\151\051\161\062\143\063\127\064\164\065\166" +
    "\066\172\067\167\070\142\071\147\072\131\073\204\074" +
    "\155\075\176\001\002\000\050\006\140\020\141\023\136" +
    "\035\156\036\145\047\151\051\161\062\143\063\127\064" +
    "\164\065\166\066\172\067\167\070\142\071\147\072\131" +
    "\073\204\074\155\075\176\001\002\000\050\006\140\020" +
    "\141\023\136\035\156\036\145\047\151\051\161\062\143" +
    "\063\127\064\164\065\166\066\172\067\167\070\142\071" +
    "\147\072\131\073\204\074\155\075\176\001\002\000\050" +
    "\006\140\020\141\023\136\035\156\036\145\047\151\051" +
    "\161\062\143\063\127\064\164\065\166\066\172\067\167" +
    "\070\142\071\147\072\131\073\204\074\155\075\176\001" +
    "\002\000\050\006\140\020\141\023\136\035\156\036\145" +
    "\047\151\051\161\062\143\063\127\064\164\065\166\066" +
    "\172\067\167\070\142\071\147\072\131\073\204\074\155" +
    "\075\176\001\002\000\004\073\237\001\002\000\050\006" +
    "\140\020\141\023\136\035\156\036\145\047\151\051\161" +
    "\062\143\063\127\064\164\065\166\066\172\067\167\070" +
    "\142\071\147\072\131\073\204\074\155\075\176\001\002" +
    "\000\050\006\140\020\141\023\136\035\156\036\145\047" +
    "\151\051\161\062\143\063\127\064\164\065\166\066\172" +
    "\067\167\070\142\071\147\072\131\073\204\074\155\075" +
    "\176\001\002\000\050\006\140\020\141\023\136\035\156" +
    "\036\145\047\151\051\161\062\143\063\127\064\164\065" +
    "\166\066\172\067\167\070\142\071\147\072\131\073\204" +
    "\074\155\075\176\001\002\000\050\006\140\020\141\023" +
    "\136\035\156\036\145\047\151\051\161\062\143\063\127" +
    "\064\164\065\166\066\172\067\167\070\142\071\147\072" +
    "\131\073\204\074\155\075\176\001\002\000\050\006\140" +
    "\020\141\023\136\035\156\036\145\047\151\051\161\062" +
    "\143\063\127\064\164\065\166\066\172\067\167\070\142" +
    "\071\147\072\131\073\204\074\155\075\176\001\002\000" +
    "\050\005\220\006\211\007\224\010\213\011\216\012\222" +
    "\013\214\014\227\015\221\016\217\017\226\021\212\022" +
    "\uff86\024\uff86\025\225\026\uff86\032\uff86\033\uff86\034\223" +
    "\001\002\000\050\005\220\006\211\007\224\010\213\011" +
    "\216\012\uff8c\013\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c" +
    "\021\uff8c\022\uff8c\024\uff8c\025\225\026\uff8c\032\uff8c\033" +
    "\uff8c\034\223\001\002\000\050\005\220\006\211\007\224" +
    "\010\213\011\216\012\222\013\214\014\227\015\221\016" +
    "\uff88\017\uff88\021\uff88\022\uff88\024\uff88\025\225\026\uff88" +
    "\032\uff88\033\uff88\034\223\001\002\000\042\005\220\006" +
    "\211\007\224\010\213\011\216\012\222\013\214\014\227" +
    "\015\221\016\217\017\226\021\212\022\230\025\225\026" +
    "\235\034\223\001\002\000\052\004\uff76\005\uff79\006\uff79" +
    "\007\uff79\010\uff79\011\uff79\012\uff79\013\uff79\014\uff79\015" +
    "\uff79\016\uff79\017\uff79\021\uff79\022\uff79\024\uff79\025\uff79" +
    "\026\uff79\032\uff79\033\uff79\034\uff79\001\002\000\050\005" +
    "\uff91\006\uff91\007\uff91\010\uff91\011\uff91\012\uff91\013\uff91" +
    "\014\uff91\015\uff91\016\uff91\017\uff91\021\uff91\022\uff91\024" +
    "\uff91\025\225\026\uff91\032\uff91\033\uff91\034\223\001\002" +
    "\000\054\004\uff77\005\uff7a\006\uff7a\007\uff7a\010\uff7a\011" +
    "\uff7a\012\uff7a\013\uff7a\014\uff7a\015\uff7a\016\uff7a\017\uff7a" +
    "\021\uff7a\022\uff7a\023\240\024\uff7a\025\uff7a\026\uff7a\032" +
    "\uff7a\033\uff7a\034\uff7a\001\002\000\052\006\140\020\141" +
    "\023\136\024\uff9c\035\156\036\145\047\151\051\161\062" +
    "\143\063\127\064\164\065\166\066\172\067\167\070\142" +
    "\071\147\072\131\073\204\074\155\075\176\001\002\000" +
    "\004\024\242\001\002\000\050\005\uffa2\006\uffa2\007\uffa2" +
    "\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016" +
    "\uffa2\017\uffa2\021\uffa2\022\uffa2\024\uffa2\025\uffa2\026\uffa2" +
    "\032\uffa2\033\uffa2\034\uffa2\001\002\000\050\005\220\006" +
    "\211\007\224\010\213\011\216\012\uff8d\013\uff8d\014\uff8d" +
    "\015\uff8d\016\uff8d\017\uff8d\021\uff8d\022\uff8d\024\uff8d\025" +
    "\225\026\uff8d\032\uff8d\033\uff8d\034\223\001\002\000\050" +
    "\005\220\006\211\007\224\010\213\011\216\012\uff8b\013" +
    "\uff8b\014\uff8b\015\uff8b\016\uff8b\017\uff8b\021\uff8b\022\uff8b" +
    "\024\uff8b\025\225\026\uff8b\032\uff8b\033\uff8b\034\223\001" +
    "\002\000\050\005\uff93\006\uff93\007\224\010\213\011\216" +
    "\012\uff93\013\uff93\014\uff93\015\uff93\016\uff93\017\uff93\021" +
    "\uff93\022\uff93\024\uff93\025\225\026\uff93\032\uff93\033\uff93" +
    "\034\223\001\002\000\050\005\220\006\211\007\224\010" +
    "\213\011\216\012\222\013\214\014\227\015\221\016\uff89" +
    "\017\uff89\021\uff89\022\uff89\024\uff89\025\225\026\uff89\032" +
    "\uff89\033\uff89\034\223\001\002\000\050\005\uff8f\006\uff8f" +
    "\007\uff8f\010\uff8f\011\uff8f\012\uff8f\013\uff8f\014\uff8f\015" +
    "\uff8f\016\uff8f\017\uff8f\021\uff8f\022\uff8f\024\uff8f\025\225" +
    "\026\uff8f\032\uff8f\033\uff8f\034\223\001\002\000\050\006" +
    "\140\020\141\023\136\035\156\036\145\047\151\051\161" +
    "\062\143\063\127\064\164\065\166\066\172\067\167\070" +
    "\142\071\147\072\131\073\204\074\155\075\176\001\002" +
    "\000\004\024\uff9d\001\002\000\044\005\220\006\211\007" +
    "\224\010\213\011\216\012\222\013\214\014\227\015\221" +
    "\016\217\017\226\021\212\022\230\024\uff9b\025\225\033" +
    "\uff9b\034\223\001\002\000\006\024\uff99\033\250\001\002" +
    "\000\004\024\uff9a\001\002\000\050\005\220\006\211\007" +
    "\224\010\213\011\216\012\uff8a\013\uff8a\014\uff8a\015\uff8a" +
    "\016\uff8a\017\uff8a\021\uff8a\022\uff8a\024\uff8a\025\225\026" +
    "\uff8a\032\uff8a\033\uff8a\034\223\001\002\000\050\005\uff90" +
    "\006\uff90\007\uff90\010\uff90\011\uff90\012\uff90\013\uff90\014" +
    "\uff90\015\uff90\016\uff90\017\uff90\021\uff90\022\uff90\024\uff90" +
    "\025\225\026\uff90\032\uff90\033\uff90\034\223\001\002\000" +
    "\050\005\220\006\211\007\224\010\213\011\216\012\222" +
    "\013\214\014\227\015\221\016\217\017\226\021\uff87\022" +
    "\uff87\024\uff87\025\225\026\uff87\032\uff87\033\uff87\034\223" +
    "\001\002\000\050\005\uff92\006\uff92\007\224\010\213\011" +
    "\216\012\uff92\013\uff92\014\uff92\015\uff92\016\uff92\017\uff92" +
    "\021\uff92\022\uff92\024\uff92\025\225\026\uff92\032\uff92\033" +
    "\uff92\034\223\001\002\000\004\024\262\001\002\000\050" +
    "\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3\013" +
    "\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3\021\uffa3\022\uffa3" +
    "\024\uffa3\025\uffa3\026\uffa3\032\uffa3\033\uffa3\034\uffa3\001" +
    "\002\000\006\024\uff99\033\250\001\002\000\004\024\uffa0" +
    "\001\002\000\004\024\266\001\002\000\004\032\267\001" +
    "\002\000\076\006\uff9f\020\uff9f\023\uff9f\027\uff9f\030\uff9f" +
    "\032\uff9f\035\uff9f\036\uff9f\047\uff9f\051\uff9f\052\uff9f\053" +
    "\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f" +
    "\062\uff9f\063\uff9f\064\uff9f\065\uff9f\066\uff9f\067\uff9f\070" +
    "\uff9f\071\uff9f\072\uff9f\073\uff9f\074\uff9f\075\uff9f\001\002" +
    "\000\004\030\uffce\001\002\000\050\006\140\020\141\023" +
    "\136\035\156\036\145\047\151\051\161\062\143\063\127" +
    "\064\164\065\166\066\172\067\167\070\142\071\147\072" +
    "\131\073\204\074\155\075\176\001\002\000\042\005\220" +
    "\006\211\007\224\010\213\011\216\012\222\013\214\014" +
    "\227\015\221\016\217\017\226\021\212\022\230\024\273" +
    "\025\225\034\223\001\002\000\050\005\uff7d\006\uff7d\007" +
    "\uff7d\010\uff7d\011\uff7d\012\uff7d\013\uff7d\014\uff7d\015\uff7d" +
    "\016\uff7d\017\uff7d\021\uff7d\022\uff7d\024\uff7d\025\uff7d\026" +
    "\uff7d\032\uff7d\033\uff7d\034\uff7d\001\002\000\004\030\uffd0" +
    "\001\002\000\050\006\140\020\141\023\136\035\156\036" +
    "\145\047\151\051\161\062\143\063\127\064\164\065\166" +
    "\066\172\067\167\070\142\071\147\072\131\073\204\074" +
    "\155\075\176\001\002\000\050\005\220\006\211\007\224" +
    "\010\213\011\216\012\222\013\214\014\227\015\221\016" +
    "\217\017\226\021\212\022\230\024\uff98\025\225\026\uff98" +
    "\032\uff98\033\uff98\034\223\001\002\000\050\006\140\020" +
    "\141\023\136\035\156\036\145\047\151\051\161\062\143" +
    "\063\127\064\164\065\166\066\172\067\167\070\142\071" +
    "\147\072\131\073\204\074\155\075\176\001\002\000\042" +
    "\005\220\006\211\007\224\010\213\011\216\012\222\013" +
    "\214\014\227\015\221\016\217\017\226\021\212\022\230" +
    "\024\301\025\225\034\223\001\002\000\050\005\uff7e\006" +
    "\uff7e\007\uff7e\010\uff7e\011\uff7e\012\uff7e\013\uff7e\014\uff7e" +
    "\015\uff7e\016\uff7e\017\uff7e\021\uff7e\022\uff7e\024\uff7e\025" +
    "\uff7e\026\uff7e\032\uff7e\033\uff7e\034\uff7e\001\002\000\050" +
    "\006\140\020\141\023\136\035\156\036\145\047\151\051" +
    "\161\062\143\063\127\064\164\065\166\066\172\067\167" +
    "\070\142\071\147\072\131\073\204\074\155\075\176\001" +
    "\002\000\042\005\220\006\211\007\224\010\213\011\216" +
    "\012\222\013\214\014\227\015\221\016\217\017\226\021" +
    "\212\022\230\024\304\025\225\034\223\001\002\000\050" +
    "\005\uff80\006\uff80\007\uff80\010\uff80\011\uff80\012\uff80\013" +
    "\uff80\014\uff80\015\uff80\016\uff80\017\uff80\021\uff80\022\uff80" +
    "\024\uff80\025\uff80\026\uff80\032\uff80\033\uff80\034\uff80\001" +
    "\002\000\050\006\140\020\141\023\136\035\156\036\145" +
    "\047\151\051\161\062\143\063\127\064\164\065\166\066" +
    "\172\067\167\070\142\071\147\072\131\073\204\074\155" +
    "\075\176\001\002\000\042\005\220\006\211\007\224\010" +
    "\213\011\216\012\222\013\214\014\227\015\221\016\217" +
    "\017\226\021\212\022\230\024\307\025\225\034\223\001" +
    "\002\000\050\005\uff7f\006\uff7f\007\uff7f\010\uff7f\011\uff7f" +
    "\012\uff7f\013\uff7f\014\uff7f\015\uff7f\016\uff7f\017\uff7f\021" +
    "\uff7f\022\uff7f\024\uff7f\025\uff7f\026\uff7f\032\uff7f\033\uff7f" +
    "\034\uff7f\001\002\000\076\006\uffa7\020\uffa7\023\uffa7\027" +
    "\uffa7\030\uffa7\032\uffa7\035\uffa7\036\uffa7\047\uffa7\051\uffa7" +
    "\052\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7\060" +
    "\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7\065\uffa7\066\uffa7" +
    "\067\uffa7\070\uffa7\071\uffa7\072\uffa7\073\uffa7\074\uffa7\075" +
    "\uffa7\001\002\000\050\005\uff82\006\uff82\007\uff82\010\uff82" +
    "\011\uff82\012\uff82\013\uff82\014\uff82\015\uff82\016\uff82\017" +
    "\uff82\021\uff82\022\uff82\024\uff82\025\uff82\026\uff82\032\uff82" +
    "\033\uff82\034\uff82\001\002\000\076\006\uffcc\020\uffcc\023" +
    "\uffcc\027\uffcc\030\uffcc\032\uffcc\035\uffcc\036\uffcc\047\uffcc" +
    "\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057" +
    "\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc" +
    "\066\uffcc\067\uffcc\070\uffcc\071\uffcc\072\uffcc\073\uffcc\074" +
    "\uffcc\075\uffcc\001\002\000\004\032\314\001\002\000\076" +
    "\006\uffa8\020\uffa8\023\uffa8\027\uffa8\030\uffa8\032\uffa8\035" +
    "\uffa8\036\uffa8\047\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8" +
    "\055\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8\062\uffa8\063" +
    "\uffa8\064\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8\071\uffa8" +
    "\072\uffa8\073\uffa8\074\uffa8\075\uffa8\001\002\000\004\023" +
    "\316\001\002\000\052\006\140\020\141\023\136\032\uffa9" +
    "\035\156\036\145\047\151\051\161\062\143\063\127\064" +
    "\164\065\166\066\172\067\167\070\142\071\147\072\131" +
    "\073\204\074\155\075\176\001\002\000\004\032\320\001" +
    "\002\000\050\006\uffba\020\uffba\023\uffba\035\uffba\036\uffba" +
    "\047\uffba\051\uffba\062\uffba\063\uffba\064\uffba\065\uffba\066" +
    "\uffba\067\uffba\070\uffba\071\uffba\072\uffba\073\uffba\074\uffba" +
    "\075\uffba\001\002\000\050\006\140\020\141\023\136\035" +
    "\156\036\145\047\151\051\161\062\143\063\127\064\164" +
    "\065\166\066\172\067\167\070\142\071\147\072\131\073" +
    "\204\074\155\075\176\001\002\000\042\005\220\006\211" +
    "\007\224\010\213\011\216\012\222\013\214\014\227\015" +
    "\221\016\217\017\226\021\212\022\230\025\225\032\uffb9" +
    "\034\223\001\002\000\004\032\324\001\002\000\052\006" +
    "\uffb8\020\uffb8\023\uffb8\024\uffb8\035\uffb8\036\uffb8\047\uffb8" +
    "\051\uffb8\062\uffb8\063\uffb8\064\uffb8\065\uffb8\066\uffb8\067" +
    "\uffb8\070\uffb8\071\uffb8\072\uffb8\073\uffb8\074\uffb8\075\uffb8" +
    "\001\002\000\052\006\140\020\141\023\136\024\uffa9\035" +
    "\156\036\145\047\151\051\161\062\143\063\127\064\164" +
    "\065\166\066\172\067\167\070\142\071\147\072\131\073" +
    "\204\074\155\075\176\001\002\000\004\024\uffb7\001\002" +
    "\000\004\024\330\001\002\000\072\006\140\020\141\023" +
    "\136\027\uffd2\032\uffa9\035\156\036\145\047\151\051\161" +
    "\052\uffb5\053\uffb1\055\uffbb\056\153\057\162\060\137\061" +
    "\201\062\143\063\127\064\164\065\166\066\172\067\167" +
    "\070\142\071\147\072\131\073\204\074\155\075\176\001" +
    "\002\000\076\006\uffb6\020\uffb6\023\uffb6\027\uffb6\030\uffb6" +
    "\032\uffb6\035\uffb6\036\uffb6\047\uffb6\051\uffb6\052\uffb6\053" +
    "\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6" +
    "\062\uffb6\063\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6\070" +
    "\uffb6\071\uffb6\072\uffb6\073\uffb6\074\uffb6\075\uffb6\001\002" +
    "\000\050\006\140\020\141\023\136\035\156\036\145\047" +
    "\151\051\161\062\143\063\127\064\164\065\166\066\172" +
    "\067\167\070\142\071\147\072\131\073\204\074\155\075" +
    "\176\001\002\000\042\005\220\006\211\007\224\010\213" +
    "\011\216\012\222\013\214\014\227\015\221\016\217\017" +
    "\226\021\212\022\230\025\225\033\334\034\223\001\002" +
    "\000\014\037\006\040\017\041\013\042\016\073\020\001" +
    "\002\000\006\024\336\031\102\001\002\000\050\005\uff81" +
    "\006\uff81\007\uff81\010\uff81\011\uff81\012\uff81\013\uff81\014" +
    "\uff81\015\uff81\016\uff81\017\uff81\021\uff81\022\uff81\024\uff81" +
    "\025\uff81\026\uff81\032\uff81\033\uff81\034\uff81\001\002\000" +
    "\004\023\uffb4\001\002\000\004\023\341\001\002\000\050" +
    "\006\140\020\141\023\136\035\156\036\145\047\151\051" +
    "\161\062\143\063\127\064\164\065\166\066\172\067\167" +
    "\070\142\071\147\072\131\073\204\074\155\075\176\001" +
    "\002\000\042\005\220\006\211\007\224\010\213\011\216" +
    "\012\222\013\214\014\227\015\221\016\217\017\226\021" +
    "\212\022\230\024\uffb3\025\225\034\223\001\002\000\004" +
    "\024\344\001\002\000\072\006\140\020\141\023\136\027" +
    "\uffd2\032\uffa9\035\156\036\145\047\151\051\161\052\uffb5" +
    "\053\uffb1\055\uffbb\056\153\057\162\060\137\061\201\062" +
    "\143\063\127\064\164\065\166\066\172\067\167\070\142" +
    "\071\147\072\131\073\204\074\155\075\176\001\002\000" +
    "\076\006\uffb2\020\uffb2\023\uffb2\027\uffb2\030\uffb2\032\uffb2" +
    "\035\uffb2\036\uffb2\047\uffb2\051\uffb2\052\uffb2\053\uffb2\054" +
    "\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2" +
    "\063\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2\070\uffb2\071" +
    "\uffb2\072\uffb2\073\uffb2\074\uffb2\075\uffb2\001\002\000\004" +
    "\024\347\001\002\000\050\005\uff84\006\uff84\007\uff84\010" +
    "\uff84\011\uff84\012\uff84\013\uff84\014\uff84\015\uff84\016\uff84" +
    "\017\uff84\021\uff84\022\uff84\024\uff84\025\uff84\026\uff84\032" +
    "\uff84\033\uff84\034\uff84\001\002\000\050\005\uff85\006\uff85" +
    "\007\uff85\010\uff85\011\uff85\012\uff85\013\uff85\014\uff85\015" +
    "\uff85\016\uff85\017\uff85\021\uff85\022\uff85\024\uff85\025\225" +
    "\026\uff85\032\uff85\033\uff85\034\223\001\002\000\050\005" +
    "\uff8e\006\uff8e\007\224\010\213\011\216\012\uff8e\013\uff8e" +
    "\014\uff8e\015\uff8e\016\uff8e\017\uff8e\021\uff8e\022\uff8e\024" +
    "\uff8e\025\225\026\uff8e\032\uff8e\033\uff8e\034\223\001\002" +
    "\000\076\006\uffa6\020\uffa6\023\uffa6\027\uffa6\030\uffa6\032" +
    "\uffa6\035\uffa6\036\uffa6\047\uffa6\051\uffa6\052\uffa6\053\uffa6" +
    "\054\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6\062" +
    "\uffa6\063\uffa6\064\uffa6\065\uffa6\066\uffa6\067\uffa6\070\uffa6" +
    "\071\uffa6\072\uffa6\073\uffa6\074\uffa6\075\uffa6\001\002\000" +
    "\042\005\220\006\211\007\224\010\213\011\216\012\222" +
    "\013\214\014\227\015\221\016\217\017\226\021\212\022" +
    "\230\024\354\025\225\034\223\001\002\000\050\005\uff94" +
    "\006\uff94\007\uff94\010\uff94\011\uff94\012\uff94\013\uff94\014" +
    "\uff94\015\uff94\016\uff94\017\uff94\021\uff94\022\uff94\024\uff94" +
    "\025\uff94\026\uff94\032\uff94\033\uff94\034\uff94\001\002\000" +
    "\124\002\uffd1\006\uffd1\020\uffd1\023\uffd1\027\uffd1\030\uffd1" +
    "\032\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042" +
    "\uffd1\043\uffd1\044\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1" +
    "\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1\061" +
    "\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1\067\uffd1" +
    "\070\uffd1\071\uffd1\072\uffd1\073\uffd1\074\uffd1\075\uffd1\076" +
    "\uffd1\077\uffd1\100\uffd1\001\002\000\004\023\357\001\002" +
    "\000\050\006\140\020\141\023\136\035\156\036\145\047" +
    "\151\051\161\062\143\063\127\064\164\065\166\066\172" +
    "\067\167\070\142\071\147\072\131\073\204\074\155\075" +
    "\176\001\002\000\042\005\220\006\211\007\224\010\213" +
    "\011\216\012\222\013\214\014\227\015\221\016\217\017" +
    "\226\021\212\022\230\024\uffb0\025\225\034\223\001\002" +
    "\000\004\024\362\001\002\000\072\006\uffaf\020\uffaf\023" +
    "\uffaf\027\uffaf\032\uffaf\035\uffaf\036\uffaf\047\uffaf\051\uffaf" +
    "\052\uffaf\053\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf\061" +
    "\uffaf\062\uffaf\063\uffaf\064\uffaf\065\uffaf\066\uffaf\067\uffaf" +
    "\070\uffaf\071\uffaf\072\uffaf\073\uffaf\074\uffaf\075\uffaf\001" +
    "\002\000\072\006\140\020\141\023\136\027\uffd2\032\uffa9" +
    "\035\156\036\145\047\151\051\161\052\uffb5\053\uffb1\055" +
    "\uffbb\056\153\057\162\060\137\061\201\062\143\063\127" +
    "\064\164\065\166\066\172\067\167\070\142\071\147\072" +
    "\131\073\204\074\155\075\176\001\002\000\076\006\uffae" +
    "\020\uffae\023\uffae\027\uffae\030\uffae\032\uffae\035\uffae\036" +
    "\uffae\047\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae" +
    "\056\uffae\057\uffae\060\uffae\061\uffae\062\uffae\063\uffae\064" +
    "\uffae\065\uffae\066\uffae\067\uffae\070\uffae\071\uffae\072\uffae" +
    "\073\uffae\074\uffae\075\uffae\001\002\000\076\006\uffab\020" +
    "\uffab\023\uffab\027\uffab\030\uffab\032\uffab\035\uffab\036\uffab" +
    "\047\uffab\051\uffab\052\uffab\053\uffab\054\366\055\uffab\056" +
    "\uffab\057\uffab\060\uffab\061\uffab\062\uffab\063\uffab\064\uffab" +
    "\065\uffab\066\uffab\067\uffab\070\uffab\071\uffab\072\uffab\073" +
    "\uffab\074\uffab\075\uffab\001\002\000\072\006\140\020\141" +
    "\023\136\027\uffd2\032\uffa9\035\156\036\145\047\151\051" +
    "\161\052\uffb5\053\uffb1\055\uffbb\056\153\057\162\060\137" +
    "\061\201\062\143\063\127\064\164\065\166\066\172\067" +
    "\167\070\142\071\147\072\131\073\204\074\155\075\176" +
    "\001\002\000\076\006\uffad\020\uffad\023\uffad\027\uffad\030" +
    "\uffad\032\uffad\035\uffad\036\uffad\047\uffad\051\uffad\052\uffad" +
    "\053\uffad\054\uffad\055\uffad\056\uffad\057\uffad\060\uffad\061" +
    "\uffad\062\uffad\063\uffad\064\uffad\065\uffad\066\uffad\067\uffad" +
    "\070\uffad\071\uffad\072\uffad\073\uffad\074\uffad\075\uffad\001" +
    "\002\000\076\006\uffac\020\uffac\023\uffac\027\uffac\030\uffac" +
    "\032\uffac\035\uffac\036\uffac\047\uffac\051\uffac\052\uffac\053" +
    "\uffac\054\uffac\055\uffac\056\uffac\057\uffac\060\uffac\061\uffac" +
    "\062\uffac\063\uffac\064\uffac\065\uffac\066\uffac\067\uffac\070" +
    "\uffac\071\uffac\072\uffac\073\uffac\074\uffac\075\uffac\001\002" +
    "\000\004\024\372\001\002\000\050\005\uff83\006\uff83\007" +
    "\uff83\010\uff83\011\uff83\012\uff83\013\uff83\014\uff83\015\uff83" +
    "\016\uff83\017\uff83\021\uff83\022\uff83\024\uff83\025\uff83\026" +
    "\uff83\032\uff83\033\uff83\034\uff83\001\002\000\004\002\000" +
    "\001\002\000\122\002\uffc3\006\uffc3\020\uffc3\023\uffc3\027" +
    "\uffc3\030\uffc3\032\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3" +
    "\041\uffc3\042\uffc3\043\uffc3\044\uffc3\047\uffc3\050\uffc3\051" +
    "\uffc3\052\uffc3\053\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3" +
    "\061\uffc3\062\uffc3\063\uffc3\064\uffc3\065\uffc3\066\uffc3\067" +
    "\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3\074\uffc3\075\uffc3" +
    "\076\uffc3\077\uffc3\100\uffc3\001\002\000\024\002\ufffe\037" +
    "\006\040\017\041\013\042\016\043\014\044\023\050\021" +
    "\073\020\001\002\000\004\002\001\001\002\000\004\002" +
    "\uffff\001\002\000\006\023\u0101\032\uffc2\001\002\000\016" +
    "\024\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9\073\ufff9\001" +
    "\002\000\016\024\ufff0\037\006\040\017\041\013\042\016" +
    "\073\020\001\002\000\004\024\ufff8\001\002\000\004\024" +
    "\u0105\001\002\000\004\027\ufff7\001\002\000\004\027\uffd2" +
    "\001\002\000\034\002\ufff6\030\ufff6\037\ufff6\040\ufff6\041" +
    "\ufff6\042\ufff6\043\ufff6\044\ufff6\050\ufff6\073\ufff6\076\ufff6" +
    "\077\ufff6\100\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0105\000\022\021\003\022\010\023\007\024\021\026" +
    "\014\027\006\032\011\033\004\001\001\000\002\001\001" +
    "\000\022\021\003\022\010\023\007\024\021\026\014\027" +
    "\006\033\374\036\375\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\025\001\001\000\002\001\001\000\004\040\026\001" +
    "\001\000\004\060\036\001\001\000\002\001\001\000\004" +
    "\061\031\001\001\000\004\041\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\025\041\030\043\051" +
    "\042\001\001\000\002\001\001\000\010\025\041\030\043" +
    "\051\051\001\001\000\002\001\001\000\012\021\003\022" +
    "\010\023\046\024\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\062\054" +
    "\001\001\000\002\001\001\000\010\021\056\034\061\042" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\021\056\034\061\042\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\065\065\001\001" +
    "\000\010\021\066\022\070\046\067\001\001\000\002\001" +
    "\001\000\004\066\075\001\001\000\004\050\072\001\001" +
    "\000\006\021\066\022\073\001\001\000\002\001\001\000" +
    "\004\050\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\063\105\001\001\000\010\021\066\022\070\046\106\001" +
    "\001\000\004\064\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\055" +
    "\114\001\001\000\010\021\066\022\070\046\115\001\001" +
    "\000\004\056\116\001\001\000\002\001\001\000\004\057" +
    "\120\001\001\000\006\035\122\067\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\064\002\131\003\172\004" +
    "\147\005\162\007\177\010\124\011\134\012\176\013\174" +
    "\014\127\015\167\016\173\017\164\020\153\021\066\022" +
    "\010\023\170\031\133\035\157\043\125\044\156\067\121" +
    "\070\145\075\143\100\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\013\174\014\127\015\167" +
    "\016\173\017\352\044\156\001\001\000\002\001\001\000" +
    "\016\013\174\014\127\015\167\016\173\017\350\044\156" +
    "\001\001\000\016\013\174\014\127\015\167\016\173\017" +
    "\347\044\156\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\013\174\014\127\015\167\016\173\017" +
    "\164\020\312\044\156\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\064\002\131\003\172" +
    "\004\147\005\162\007\177\010\124\011\134\012\176\013" +
    "\174\014\127\015\167\016\173\017\164\020\153\021\066" +
    "\022\010\023\170\031\273\035\157\043\125\044\156\067" +
    "\121\070\145\075\143\100\132\001\001\000\002\001\001" +
    "\000\054\002\131\003\172\004\147\005\162\007\177\010" +
    "\124\011\134\012\176\013\174\014\127\015\167\016\173" +
    "\017\164\020\153\035\157\043\267\044\156\067\121\070" +
    "\145\075\143\100\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\013\174\014\127\015\167" +
    "\016\173\017\202\044\156\001\001\000\004\106\262\001" +
    "\001\000\002\001\001\000\004\104\205\001\001\000\020" +
    "\013\174\014\127\015\167\016\173\017\207\044\156\045" +
    "\206\001\001\000\004\105\260\001\001\000\004\110\214" +
    "\001\001\000\016\013\174\014\127\015\167\016\173\017" +
    "\257\044\156\001\001\000\016\013\174\014\127\015\167" +
    "\016\173\017\256\044\156\001\001\000\016\013\174\014" +
    "\127\015\167\016\173\017\255\044\156\001\001\000\016" +
    "\013\174\014\127\015\167\016\173\017\254\044\156\001" +
    "\001\000\004\047\250\001\001\000\016\013\174\014\127" +
    "\015\167\016\173\017\246\044\156\001\001\000\016\013" +
    "\174\014\127\015\167\016\173\017\245\044\156\001\001" +
    "\000\016\013\174\014\127\015\167\016\173\017\244\044" +
    "\156\001\001\000\016\013\174\014\127\015\167\016\173" +
    "\017\243\044\156\001\001\000\016\013\174\014\127\015" +
    "\167\016\173\017\242\044\156\001\001\000\002\001\001" +
    "\000\016\013\174\014\127\015\167\016\173\017\235\044" +
    "\156\001\001\000\016\013\174\014\127\015\167\016\173" +
    "\017\233\044\156\001\001\000\016\013\174\014\127\015" +
    "\167\016\173\017\232\044\156\001\001\000\016\013\174" +
    "\014\127\015\167\016\173\017\231\044\156\001\001\000" +
    "\016\013\174\014\127\015\167\016\173\017\230\044\156" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\013\174\014\127\015\167\016" +
    "\173\017\207\044\156\045\240\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\013\174\014\127\015\167\016\173\017\251\044\156\001" +
    "\001\000\002\001\001\000\004\111\252\001\001\000\004" +
    "\047\253\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\263\001\001\000" +
    "\004\107\264\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\013\174\014" +
    "\127\015\167\016\173\017\271\044\156\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\013" +
    "\174\014\127\015\167\016\173\017\275\044\156\001\001" +
    "\000\002\001\001\000\016\013\174\014\127\015\167\016" +
    "\173\017\277\044\156\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\013\174\014\127\015\167\016\173\017" +
    "\302\044\156\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\013\174\014\127\015\167\016\173\017\305\044" +
    "\156\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\013\174" +
    "\014\127\015\167\016\173\017\164\020\316\044\156\001" +
    "\001\000\002\001\001\000\004\071\320\001\001\000\016" +
    "\013\174\014\127\015\167\016\173\017\321\044\156\001" +
    "\001\000\004\072\322\001\001\000\002\001\001\000\004" +
    "\073\324\001\001\000\020\013\174\014\127\015\167\016" +
    "\173\017\164\020\325\044\156\001\001\000\004\074\326" +
    "\001\001\000\002\001\001\000\052\002\131\003\330\004" +
    "\147\005\162\007\177\010\124\011\134\012\176\013\174" +
    "\014\127\015\167\016\173\017\164\020\153\035\157\044" +
    "\156\067\121\070\145\075\143\100\132\001\001\000\002" +
    "\001\001\000\016\013\174\014\127\015\167\016\173\017" +
    "\332\044\156\001\001\000\002\001\001\000\004\021\334" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\076" +
    "\337\001\001\000\002\001\001\000\016\013\174\014\127" +
    "\015\167\016\173\017\341\044\156\001\001\000\004\077" +
    "\342\001\001\000\002\001\001\000\052\002\131\003\344" +
    "\004\147\005\162\007\177\010\124\011\134\012\176\013" +
    "\174\014\127\015\167\016\173\017\164\020\153\035\157" +
    "\044\156\067\121\070\145\075\143\100\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\013\174\014\127\015\167\016\173\017\357\044" +
    "\156\001\001\000\004\101\360\001\001\000\002\001\001" +
    "\000\004\102\362\001\001\000\052\002\131\003\363\004" +
    "\147\005\162\007\177\010\124\011\134\012\176\013\174" +
    "\014\127\015\167\016\173\017\164\020\153\035\157\044" +
    "\156\067\121\070\145\075\143\100\132\001\001\000\004" +
    "\103\364\001\001\000\004\006\366\001\001\000\052\002" +
    "\131\003\367\004\147\005\162\007\177\010\124\011\134" +
    "\012\176\013\174\014\127\015\167\016\173\017\164\020" +
    "\153\035\157\044\156\067\121\070\145\075\143\100\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\021\003\022\010\023\007\024\021\026\014\027" +
    "\006\033\374\036\376\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\052\u0101\001\001\000" +
    "\010\021\066\022\070\046\u0102\001\001\000\004\053\u0103" +
    "\001\001\000\002\001\001\000\004\054\u0105\001\001\000" +
    "\006\035\u0106\067\121\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return decafScanner.next_token(); 
    }


    private DecafScanner decafScanner;

    public parser(DecafScanner decafScanner){
        this.decafScanner = decafScanner;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= Decl DeclPlus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DeclPlus ::= Decl DeclPlus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclPlus",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DeclPlus ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclPlus",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decl ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decl ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decl ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decl ::= InterfaceDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$0 ::= 
            {
              DSCP RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DSCP t = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int funcIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funcIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String funcID = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

        if(IPass.pass.equals("first")){
            STSStack.stack.newScope();
            /*create label here.*/
        }
        else{
            STSStack.stack.nextScope();
            RESULT = OpHandler.funcDecl(funcID, t);
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$1 ::= 
            {
              DSCP RESULT =(DSCP) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DSCP t = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int funcIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int funcIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String funcID = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arglistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arglistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<DSCP> arglist = (List<DSCP>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

        if(!IPass.pass.equals("first")) {
            OpHandler.giveArg(funcID, arglist);
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$2 ::= 
            {
              DSCP RESULT =(DSCP) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DSCP t = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int funcIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int funcIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String funcID = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int arglistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arglistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<DSCP> arglist = (List<DSCP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

        if(IPass.pass.equals("first")){
            STSStack.stack.newFunctionScope(funcID);
        }
        else {
            STSStack.stack.nextScope();
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FunctionDecl ::= Type ID LPAREN NT$0 Formals NT$1 RPAREN NT$2 StmtBlock 
            {
              DSCP RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (DSCP) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		DSCP t = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int funcIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int funcIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String funcID = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int arglistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int arglistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<DSCP> arglist = (List<DSCP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
            STSStack.stack.exitScope();
            STSStack.stack.exitScope();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$3 ::= 
            {
              DSCP RESULT =null;
		int funcIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funcIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String funcID = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

        if(IPass.pass.equals("first")){
            STSStack.stack.newScope();
        }
        else{
            STSStack.stack.nextScope();
            RESULT = OpHandler.funcDecl(funcID, new VoidType());
        }

    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$4 ::= 
            {
              DSCP RESULT =(DSCP) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int funcIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int funcIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String funcID = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arglistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arglistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<DSCP> arglist = (List<DSCP>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;


        if(!IPass.pass.equals("first")){
            OpHandler.giveArg(funcID, arglist);
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$5 ::= 
            {
              DSCP RESULT =(DSCP) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int funcIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int funcIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String funcID = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int arglistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arglistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<DSCP> arglist = (List<DSCP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

        if(IPass.pass.equals("first")){
            STSStack.stack.newFunctionScope(funcID);
        }
        else {
            STSStack.stack.nextScope();
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FunctionDecl ::= VOID ID LPAREN NT$3 Formals NT$4 RPAREN NT$5 StmtBlock 
            {
              DSCP RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (DSCP) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int funcIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int funcIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String funcID = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int arglistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int arglistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<DSCP> arglist = (List<DSCP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
        STSStack.stack.exitScope();
        STSStack.stack.exitScope();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Formals ::= Variable VariableComma 
            {
              List<DSCP> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DSCP v = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<DSCP> vc = (List<DSCP>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        vc.add(v);RESULT = vc;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Formals",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Formals ::= 
            {
              List<DSCP> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Formals",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VariableComma ::= COMMA Variable VariableComma 
            {
              List<DSCP> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DSCP v = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<DSCP> vc = (List<DSCP>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        vc.add(v); RESULT = vc;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableComma",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VariableComma ::= 
            {
              List<DSCP> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableComma",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$6 ::= 
            {
              DSCP RESULT =null;
		int classIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int classIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String classID = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

        if(IPass.pass.equals("first")){
            RESULT = OpHandler.classDecl(classID);
        }
        else{
            STSStack.stack.nextScope();
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ClassDecl ::= CLASS ID ExtendsEps ImplementsEps NT$6 LCURLY FieldStar RCURLY 
            {
              DSCP RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (DSCP) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int classIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int classIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String classID = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
        STSStack.stack.exitScope();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ExtendsEps ::= EXTENDS ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(IPass.pass.equals("second")){
            OpHandler.extend(id);
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExtendsEps",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ExtendsEps ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExtendsEps",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$7 ::= 
            {
              Object RESULT =null;
/*id should be interface and exist*/
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ImplementsEps ::= IMPLEMENTS ID NT$7 ImplemetsComma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImplementsEps",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ImplementsEps ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImplementsEps",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ImplemetsComma ::= COMMA ID ImplemetsComma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImplemetsComma",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ImplemetsComma ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImplemetsComma",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FieldStar ::= Field FieldStar 
            {
              List<DSCP> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DSCP f = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<DSCP> fs = (List<DSCP>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        fs.add(f);RESULT = fs;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldStar",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FieldStar ::= 
            {
              List<DSCP> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldStar",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Field ::= AccessMode VariableDecl 
            {
              DSCP RESULT =null;
		int amleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DecafAccessMode am = (DecafAccessMode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DSCP vd = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(IPass.pass.equals("second")){
            vd.setAccessMode(am);
            RESULT = vd;
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Field",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Field ::= AccessMode FunctionDecl 
            {
              DSCP RESULT =null;
		int amleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DecafAccessMode am = (DecafAccessMode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DSCP f = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(IPass.pass.equals("second")){
            f.setAccessMode(am);
            RESULT = f;
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Field",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // AccessMode ::= PRIVATE 
            {
              DecafAccessMode RESULT =null;
		int amleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int amright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String am = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!IPass.pass.equals("first")){RESULT = OpHandler.createAccessMode(am);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AccessMode",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // AccessMode ::= PROTECTED 
            {
              DecafAccessMode RESULT =null;
		int amleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int amright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String am = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!IPass.pass.equals("first")){RESULT = OpHandler.createAccessMode(am);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AccessMode",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // AccessMode ::= PUBLIC 
            {
              DecafAccessMode RESULT =null;
		int amleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int amright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String am = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!IPass.pass.equals("first")){RESULT = OpHandler.createAccessMode(am);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AccessMode",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // AccessMode ::= 
            {
              DecafAccessMode RESULT =null;
		if(!IPass.pass.equals("first")){RESULT = OpHandler.createAccessMode("default");}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AccessMode",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$8 ::= 
            {
              DSCP RESULT =null;
		int interfaceIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int interfaceIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String interfaceID = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

        if(IPass.pass.equals("first")){
            OpHandler.interfaceDecl(interfaceID);
        }
        else
            STSStack.stack.nextScope();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // InterfaceDecl ::= INTERFACE ID NT$8 LCURLY PrototypeStar RCURLY 
            {
              DSCP RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (DSCP) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int interfaceIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int interfaceIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String interfaceID = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
        STSStack.stack.exitScope();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InterfaceDecl",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PrototypeStar ::= Prototype PrototypeStar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrototypeStar",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PrototypeStar ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrototypeStar",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$9 ::= 
            {
              Object RESULT =null;
		int funcIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funcIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String funcID = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

        if(IPass.pass.equals("first")){
            STSStack.stack.newScope();
        }
        else
            STSStack.stack.nextScope();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int funcIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int funcIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String funcID = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

        STSStack.stack.exitScope();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Prototype ::= Type ID LPAREN NT$9 Formals NT$10 RPAREN SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int funcIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int funcIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String funcID = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Prototype",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$11 ::= 
            {
              Object RESULT =null;

        if(IPass.pass.equals("first")){
            STSStack.stack.newScope();
        }
        else
            STSStack.stack.nextScope();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

        STSStack.stack.exitScope();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Prototype ::= VOID ID LPAREN NT$11 Formals NT$12 RPAREN SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Prototype",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$13 ::= 
            {
              Object RESULT =null;

        if(IPass.pass.equals("first")){
            STSStack.stack.newScope();
        }
        else {
            STSStack.stack.nextScope();
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // StmtBlock ::= NT$13 LCURLY VariableDeclStar RCURLY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        STSStack.stack.exitScope();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtBlock",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VariableDeclStar ::= VariableDecl VariableDeclStar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDeclStar",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VariableDeclStar ::= StmtStar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDeclStar",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // StmtStar ::= Stmt StmtStar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtStar",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // StmtStar ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtStar",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Stmt ::= ExprEps SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Stmt ::= ForStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Stmt ::= WhileStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Stmt ::= IfStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Stmt ::= BreakStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Stmt ::= ContinueStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Stmt ::= ReturnStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Stmt ::= PrintStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Stmt ::= StmtBlock 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VariableDecl ::= Variable SEMI 
            {
              DSCP RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DSCP v = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDecl",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Variable ::= Type ID 
            {
              DSCP RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DSCP t = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String idName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
       RESULT = t;
       if (IPass.pass.equals("second")) {
            OpHandler.varDecl(t,idName);
       }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variable",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Type ::= INT 
            {
              DSCP RESULT =null;
		if(!IPass.pass.equals("first")){RESULT = new IntType();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Type ::= DOUBLE 
            {
              DSCP RESULT =null;
		if(!IPass.pass.equals("first")){RESULT = new DoubleType();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Type ::= BOOL 
            {
              DSCP RESULT =null;
		if(!IPass.pass.equals("first"))RESULT = new BoolType();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Type ::= STRING 
            {
              DSCP RESULT =null;
		if(!IPass.pass.equals("first"))RESULT = new StringType();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Type ::= ID 
            {
              DSCP RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!IPass.pass.equals("first"))RESULT = OpHandler.idType(id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Type ::= Type BRACKETS 
            {
              DSCP RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DSCP t = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(!IPass.pass.equals("first"))RESULT = new ArrayType(t);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$14 ::= 
            {
              Object RESULT =null;

        if(IPass.pass.equals("first")){
            STSStack.stack.newLoopScope();
        }
        else
            STSStack.stack.nextScope();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

        if(IPass.pass.equals("third")){
            CodeGen.loopCgen();
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$16 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DSCP expr = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

        if(IPass.pass.equals("third")){
            OpHandler.condition(expr);
            CodeGen.loopCondition();
        } /*check condition put bne jump here*/
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$17 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DSCP expr = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

        CodeGen.toggleInFUEXP();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$18 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DSCP expr = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

        CodeGen.toggleInFUEXP();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ForStmt ::= NT$14 FOR LPAREN ExprEps SEMI NT$15 Expr NT$16 SEMI NT$17 ExprEps NT$18 RPAREN Stmt 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		DSCP expr = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
        STSStack.stack.exitScope();
        if(IPass.pass.equals("third")){
            CodeGen.ForUpdateCgen();
            CodeGen.loopCgen_Ending();
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ForStmt",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$19 ::= 
            {
              Object RESULT =null;

        if(IPass.pass.equals("first")){
            STSStack.stack.newLoopScope();
        }
        else
            STSStack.stack.nextScope();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$20 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

        if(IPass.pass.equals("third")){
            CodeGen.loopCgen();
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$21 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DSCP expr = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

        if(IPass.pass.equals("third")){
            OpHandler.condition(expr);
            CodeGen.loopCondition();
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // WhileStmt ::= NT$19 WHILE NT$20 LPAREN Expr NT$21 RPAREN Stmt 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DSCP expr = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		

        STSStack.stack.exitScope();
        if(IPass.pass.equals("third")){
            CodeGen.loopCgen_Ending();
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$22 ::= 
            {
              Object RESULT =null;

        if(IPass.pass.equals("first")){
            STSStack.stack.newScope();
        }
        else
            STSStack.stack.nextScope();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$23 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DSCP expr = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

        if(IPass.pass.equals("third")){
            OpHandler.condition(expr);
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$23",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$24 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DSCP expr = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

        if(IPass.pass.equals("third")){
            CodeGen.ifElseCgen();
    }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$24",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$25 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DSCP expr = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

        if(IPass.pass.equals("third")){
            CodeGen.ifElseCgen_ElseSection();
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$25",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // IfStmt ::= NT$22 IF LPAREN Expr NT$23 RPAREN NT$24 Stmt NT$25 ElseStmtEps 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DSCP expr = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
        STSStack.stack.exitScope();
        if(IPass.pass.equals("third")){
            CodeGen.ifElseCgen_Ending();
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ElseStmtEps ::= ELSE Stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ElseStmtEps",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ElseStmtEps ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ElseStmtEps",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ExprEps ::= Expr 
            {
              DSCP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DSCP e = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = e;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprEps",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ExprEps ::= 
            {
              DSCP RESULT =null;
		RESULT = new VoidType();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprEps",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ReturnStmt ::= RETURN ExprEps SEMI 
            {
              Object RESULT =null;
		int eepsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eepsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DSCP eeps = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        if(IPass.pass.equals("third")){
            OpHandler.checkReturnType(eeps);
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReturnStmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // BreakStmt ::= BREAK SEMI 
            {
              Object RESULT =null;
		
        if(IPass.pass.equals("third")){
            OpHandler.breakSt();
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BreakStmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ContinueStmt ::= CONTINUE SEMI 
            {
              Object RESULT =null;
		
        if(IPass.pass.equals("third")){
            OpHandler.contSt();
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ContinueStmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$26 ::= 
            {
              Object RESULT =null;
		int funcIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funcIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String funcID = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

        if(IPass.pass.equals("third"))
            OpHandler.isArg = true;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$26",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$27 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int funcIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int funcIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String funcID = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<DSCP> args = (List<DSCP>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

        if(IPass.pass.equals("third")){
            OpHandler.isPrintSt = false;
            OpHandler.callFunction(funcID,args);
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$27",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Call ::= ID LPAREN NT$26 Actuals NT$27 RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int funcIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int funcIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String funcID = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<DSCP> args = (List<DSCP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Call",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Call ::= Expr DOT ID LPAREN Actuals RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Call",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$28 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DSCP e = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

        if(IPass.pass.equals("third")){
            OpHandler.isPrintSt = true;
            OpHandler.exprComma(e);
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$28",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$29 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DSCP e = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<DSCP> ec = (List<DSCP>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

        if(IPass.pass.equals("third")){
            OpHandler.isPrintSt = false;
            OpHandler.printLine();
            ec.add(e);
            RESULT = ec;
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$29",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PrintStmt ::= PRINT LPAREN Expr NT$28 ExprComma NT$29 RPAREN SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DSCP e = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<DSCP> ec = (List<DSCP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrintStmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$30 ::= 
            {
              List<DSCP> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DSCP e = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

        if(IPass.pass.equals("third")){
            OpHandler.exprComma(e);
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$30",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Actuals ::= Expr NT$30 ExprComma 
            {
              List<DSCP> RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (List<DSCP>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DSCP e = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<DSCP> ec = (List<DSCP>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(IPass.pass.equals("third")){
            ec.add(e);RESULT = ec;
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Actuals",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Actuals ::= 
            {
              List<DSCP> RESULT =null;
		if(IPass.pass.equals("third")){RESULT = new ArrayList<>();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Actuals",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$31 ::= 
            {
              List<DSCP> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DSCP e = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
if(IPass.pass.equals("third")){OpHandler.exprComma(e);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$31",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ExprComma ::= COMMA Expr NT$31 ExprComma 
            {
              List<DSCP> RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (List<DSCP>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DSCP e = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<DSCP> ec = (List<DSCP>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ec.add(e);RESULT = ec;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprComma",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ExprComma ::= 
            {
              List<DSCP> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprComma",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Expr ::= LValue ASSIGN Expr 
            {
              DSCP RESULT =null;
		int lvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DSCP lval = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DSCP e1 = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (IPass.pass.equals("third")) {RESULT = OpHandler.assign(lval, e1);OpHandler.isArr = false; } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Expr ::= Constant 
            {
              DSCP RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DSCP c = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (IPass.pass.equals("third")) {RESULT = c;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Expr ::= THIS 
            {
              DSCP RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Expr ::= Call 
            {
              DSCP RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Expr ::= LPAREN Expr RPAREN 
            {
              DSCP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DSCP e = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Expr ::= Expr PLUS Expr 
            {
              DSCP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DSCP e1 = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DSCP e2 = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (IPass.pass.equals("third")) {RESULT = OpHandler.add(e1, e2);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Expr ::= Expr MINUS Expr 
            {
              DSCP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DSCP e1 = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DSCP e2 = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (IPass.pass.equals("third")){RESULT = OpHandler.subtract(e1, e2);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Expr ::= Expr TIMES Expr 
            {
              DSCP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DSCP e1 = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DSCP e2 = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (IPass.pass.equals("third")) {RESULT = OpHandler.multiply(e1, e2);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Expr ::= Expr DIVIDE Expr 
            {
              DSCP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DSCP e1 = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DSCP e2 = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (IPass.pass.equals("third")) {RESULT = OpHandler.divide(e1, e2);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Expr ::= Expr MOD Expr 
            {
              DSCP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DSCP e1 = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DSCP e2 = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (IPass.pass.equals("third")) {RESULT = OpHandler.mod(e1, e2);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Expr ::= MINUS Expr 
            {
              DSCP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DSCP e1 = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if (IPass.pass.equals("third")) {RESULT = OpHandler.negate(e1);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Expr ::= Expr GT Expr 
            {
              DSCP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DSCP e1 = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DSCP e2 = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (IPass.pass.equals("third")){RESULT = OpHandler.compare(e1, e2, op);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Expr ::= Expr LT Expr 
            {
              DSCP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DSCP e1 = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DSCP e2 = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (IPass.pass.equals("third")){RESULT = OpHandler.compare(e1, e2, op2);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Expr ::= Expr LE Expr 
            {
              DSCP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DSCP e1 = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int op3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DSCP e2 = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (IPass.pass.equals("third")){RESULT = OpHandler.compare(e1, e2, op3);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Expr ::= Expr GE Expr 
            {
              DSCP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DSCP e1 = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int op4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DSCP e2 = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (IPass.pass.equals("third")){RESULT = OpHandler.compare(e1, e2, op4);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Expr ::= Expr EQ Expr 
            {
              DSCP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DSCP e1 = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int op5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DSCP e2 = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (IPass.pass.equals("third")){RESULT = OpHandler.compare(e1, e2, op5);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Expr ::= Expr NE Expr 
            {
              DSCP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DSCP e1 = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int op6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DSCP e2 = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (IPass.pass.equals("third")){RESULT = OpHandler.compare(e1, e2, op6);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Expr ::= Expr AND Expr 
            {
              DSCP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DSCP e1 = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int op7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DSCP e2 = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (IPass.pass.equals("third")){RESULT = OpHandler.opBool(e1, e2, op7);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Expr ::= Expr OR Expr 
            {
              DSCP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DSCP e1 = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int op8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op8 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DSCP e2 = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (IPass.pass.equals("third")){RESULT = OpHandler.opBool(e1, e2, op8);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Expr ::= NOT Expr 
            {
              DSCP RESULT =null;
		int op9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int op9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op9 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DSCP e1 = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (IPass.pass.equals("third")){RESULT = OpHandler.opBool(e1, new BoolType(), op9);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Expr ::= READINTEGER LPAREN RPAREN 
            {
              DSCP RESULT =null;
		if (IPass.pass.equals("third")){RESULT = OpHandler.readInteger();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Expr ::= READLINE LPAREN RPAREN 
            {
              DSCP RESULT =null;
		if (IPass.pass.equals("third")){RESULT = OpHandler.readLine();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Expr ::= NEW ID 
            {
              DSCP RESULT =null;
		/*new operation for class types only*/
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Expr ::= NEWARRAY LPAREN Expr COMMA Type RPAREN 
            {
              DSCP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DSCP e = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DSCP t = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if (IPass.pass.equals("third")){RESULT = OpHandler.newArray(e,t);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Expr ::= ITOD LPAREN Expr RPAREN 
            {
              DSCP RESULT =null;
		int intValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int intValright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DSCP intVal = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(IPass.pass.equals("third")){RESULT = OpHandler.itod(intVal);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Expr ::= DTOI LPAREN Expr RPAREN 
            {
              DSCP RESULT =null;
		int doubleValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int doubleValright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DSCP doubleVal = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(IPass.pass.equals("third")){RESULT = OpHandler.dtoi(doubleVal);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Expr ::= ITOB LPAREN Expr RPAREN 
            {
              DSCP RESULT =null;
		int intValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int intValright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DSCP intVal = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(IPass.pass.equals("third")){RESULT = OpHandler.itob(intVal);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Expr ::= BTOI LPAREN Expr RPAREN 
            {
              DSCP RESULT =null;
		int boolValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int boolValright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DSCP boolVal = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(IPass.pass.equals("third")){RESULT = OpHandler.btoi(boolVal);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Expr ::= RValue 
            {
              DSCP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DSCP e = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // RValue ::= ID 
            {
              DSCP RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*read from memory and push tu stack the value of id*/
        if (IPass.pass.equals("third")){
            RESULT = OpHandler.fetchRvalue(id);
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RValue",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // RValue ::= Expr DOT ID 
            {
              DSCP RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RValue",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // RValue ::= Expr LBRACK Expr RBRACK 
            {
              DSCP RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DSCP arr = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DSCP e = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        if(IPass.pass.equals("third")){
            RESULT = OpHandler.arrayIndexingR(arr,e);
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RValue",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // LValue ::= ID 
            {
              DSCP RESULT =null;
		int idNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String idName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(IPass.pass.equals("third")){ RESULT = STSStack.stack.getDSCP(idName);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LValue",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // LValue ::= Expr DOT ID 
            {
              DSCP RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DSCP exp = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*exp should be the type of class and id should exist and be accessible.*/
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LValue",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // LValue ::= Expr LBRACK Expr RBRACK 
            {
              DSCP RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DSCP arr = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DSCP e = (DSCP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(IPass.pass.equals("third")){RESULT = OpHandler.arrayIndexingL(arr,e);OpHandler.isArr = true;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LValue",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Constant ::= INTLIT 
            {
              DSCP RESULT =null;
		int idnumberleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idnumberright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String idnumber = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(IPass.pass.equals("third")){RESULT = new IntType(); CodeGen.loadConstantIntCgen(Integer.parseInt(idnumber));  CodeGen.pushMips(3);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Constant ::= DOUBLELIT 
            {
              DSCP RESULT =null;
		int doubleNumberleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int doubleNumberright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String doubleNumber = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(IPass.pass.equals("third")){RESULT = new DoubleType(); CodeGen.loadConstantDoubleCgen(Double.parseDouble(doubleNumber));  CodeGen.pushMipsDouble(4);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Constant ::= BooleanConstant 
            {
              DSCP RESULT =null;
		int boolValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int boolValright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String boolVal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(IPass.pass.equals("third")){RESULT = new BoolType(); CodeGen.loadConstantBoolCgen( Boolean.parseBoolean(boolVal)); CodeGen.pushMips(3);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Constant ::= STRINGLIT 
            {
              DSCP RESULT =null;
		int stringValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringValright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String stringVal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(IPass.pass.equals("third")){RESULT = new StringType();CodeGen.loadStringConstant(stringVal); CodeGen.pushMips(3)/* we store address of string in memory in to stack*/;} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Constant ::= NULL 
            {
              DSCP RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // BooleanConstant ::= TRUE 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BooleanConstant",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // BooleanConstant ::= FALSE 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = f;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BooleanConstant",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
